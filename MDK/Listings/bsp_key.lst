C51 COMPILER V9.60.0.0   BSP_KEY                                                           11/29/2022 09:15:39 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BSP_KEY
OBJECT MODULE PLACED IN .\Objects\bsp_key.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\BSP\bsp_key\bsp_key.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\BSP;..\BSP\b
                    -sp_key;..\USER;..\BSP\bsp_lcd1602;..\middleware;..\middleware\EventHandler;..\BSP\DS1302;..\USER\timer) DEBUG OBJECTEXTE
                    -ND PRINT(.\Listings\bsp_key.lst) OBJECT(.\Objects\bsp_key.obj)

line level    source

   1          /*
   2           * @Author: liubotao
   3           * @Date: 2022-11-18 00:13:48
   4           * @LastEditors: liubotao
   5           * @LastEditTime: 2022-11-29 09:14:37
   6           * @FilePath: \test_51\BSP\bsp_key\bsp_key.c
   7           * @Description: 按键检测和矩阵按键检测
   8           * 
   9           */
  10          
  11          #include "bsp.h"
  12          //#include "fifo.h"
  13           uint8_t  KeyVal; //全局函数，键值
  14          ///////////////////////////////////////////矩阵按键部分///////////////////////////////////////////////
  15          #define MATRIX_KEY 0
  16          
  17          
  18          
  19          #if (MATRIX_KEY == 1)
              int8_t matrixKeyScan_1() //还没加消抖
              {
                      uint8_t num = 0;
                      uint16_t buffer = 0;
              
                      for (num = 0; num < 4; num++)
                      {
                              if (num)
                                      buffer = buffer << 4;
                              keyboard = ~(0x80 >> num);
                              buffer |= (keyboard & 0x0f);
                      }
                      num = 16;
                      while (num--)
                      {
                              if (((buffer >> num) & 0x01) == 0)
                              {
                                      KeyValue = num;
                                      break;
                              }
                      }
                      return KeyValue;
              }
              #elif (MATRIX_KEY == 2)
              /*
              检测到按键被按下时，将行扫描的结果存入临时变量，再进行列扫描，得到的结果和临时变量进行或运算。
              扫描完得到结果后遍历数组，找到对应的编码位置并显示数码管编码
              */
              uint8_t code KEY_TABLE[] =
                      {
                              0xEE, 0xED, 0xEB, 0xE7,
                              0xDE, 0xDD, 0xDB, 0xBB,
                              0xBE, 0xBD, 0xBB, 0xB7,
                              0x7E, 0x7D, 0x7B, 0x77};
C51 COMPILER V9.60.0.0   BSP_KEY                                                           11/29/2022 09:15:39 PAGE 2   

              int8_t matrixKeyScan_2()
              {
                      static uint16_t keyDelayTime;
                      uint16_t temp, key, i;
                      keyboard = 0xF0;
                      if (keyboard != 0xF0)
                      {
                              keyDelayTime++;
                              if (keyDelayTime > 3)
                              {
                                      temp = keyboard;
                                      keyboard = 0x0F;
                                      key = temp | keyboard;
                                      for (i = 0; i < 16; ++i)
                                      {
                                              if (key == KEY_TABLE[i])
                                                      break;
                                      }
                                      KeyValue = i;
                                      return KeyValue;
                              }
                              else
                                      return -1;
                      }
                      else
                      {
                              keyDelayTime = 0;
                              return -1;
                      }
              }
              #elif (MATRIX_KEY == 3)
              int8_t matrixKeyScan_3()
              {
                      static uint16_t keyDelayTime;
                      keyboard = 0x0f;
                      if (keyboard != 0x0f)
                      {
                              keyDelayTime++;
                              if (keyDelayTime > keyUncertainTime)
                              {
                                      keyboard = 0X0F;
                                      switch (keyboard)
                                      {
                                      case (0X0E):
                                              KeyValue = 0;
                                              break;
                                      case (0X0D):
                                              KeyValue = 1;
                                              break;
                                      case (0X0B):
                                              KeyValue = 2;
                                              break;
                                      case (0X07):
                                              KeyValue = 3;
                                              break;
                                      }
                                      keyboard = 0XF0;
                                      switch (keyboard)
                                      {
                                      case (0XE0):
                                              KeyValue = KeyValue;
                                              break;
C51 COMPILER V9.60.0.0   BSP_KEY                                                           11/29/2022 09:15:39 PAGE 3   

                                      case (0XD0):
                                              KeyValue = KeyValue + 4;
                                              break;
                                      case (0XB0):
                                              KeyValue = KeyValue + 8;
                                              break;
                                      case (0X70):
                                              KeyValue = KeyValue + 12;
                                              break;
                                      }
                              }
                              return KeyValue;
                      }
                      else
                      {
                              keyDelayTime = 0;
                              return -1;
                      }
              }
              #endif
 136          
 137          
 138          
 139          ///////////////////////////////////////////独立按键部分///////////////////////////////////////////////
 140          
 141          ///////////////////////////////
 142          //单个按键扫描函数
 143          static unsigned char IsKeyDown1(void) {if ((key_1) == 0) return 1;else return 0;}
 144          
 145          //static unsigned char IsKeyDown2(void) {if ((key_2) == 0) return 1;else return 0;}
 146          //....
 147          //更多按键加在后面
 148          //////////////////////////////
 149          
 150          //FIFO  f_K;                                                                                    //单个按键FIFO
 151          //uint8_t keyFIFOBuffer[KEY_FIFO_SIZE]={0};   
 152          KEY_T   s_tBtn[KEY_COUNT] = {0};                                                //按键结构体            
 153          void bsp_InitKeyVar(void)
 154          {
 155   1              uint8_t i;
 156   1      
 157   1              //createQueue(&f_K,KEY_FIFO_SIZE,keyFIFOBuffer);        //队列初始化
 158   1              //给每个按键结构体成员变量赋一组缺省值
 159   1              for (i = 0; i < KEY_COUNT; i++)
 160   1              {
 161   2                      s_tBtn[i].LongTime = KEY_LONG_TIME;                             // 长按时间 0 表示不检测长按键事件 
 162   2                      s_tBtn[i].Count = KEY_FILTER_TIME / 2;                  // 计数器设置为滤波时间的一半 
 163   2                      s_tBtn[i].State = 0;                                                    // 按键缺省状态，0为未按下 
 164   2      //              s_tBtn[i].RepeatSpeed = 0;                                              // 按键连发的速度，0表示不支持连发 
 165   2      //              s_tBtn[i].RepeatCount = 0;                                              // 连发计数器 
 166   2              } 
 167   1      
 168   1              ////////////////////////
 169   1              s_tBtn[0].IsKeyDownFunc = IsKeyDown1;                           
 170   1      //      s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
 171   1              //....
 172   1              //更多按键加在后面
 173   1              ///////////////////////
 174   1      }
 175          uint8_t a=0;
 176          static void bsp_DetectKey(unsigned char i)                      //按键扫描
 177          {
C51 COMPILER V9.60.0.0   BSP_KEY                                                           11/29/2022 09:15:39 PAGE 4   

 178   1              KEY_T *pBtn;
 179   1      
 180   1              if (s_tBtn[i].IsKeyDownFunc == NULL)
 181   1              {
 182   2                      return;
 183   2                      //printf("Fault : DetectButton(), s_tBtn[i].IsKeyDownFunc undefine");
 184   2              }
 185   1      
 186   1              pBtn = &s_tBtn[i];                                                              //依次扫描按键
 187   1              if (pBtn->IsKeyDownFunc())
 188   1              {
 189   2                      if (pBtn->Count < KEY_FILTER_TIME)
 190   2                      {
 191   3                              pBtn->Count = KEY_FILTER_TIME;
 192   3                      }
 193   2                      else if (pBtn->Count < 2 * KEY_FILTER_TIME)     //小于两倍继续加
 194   2                      {
 195   3                              pBtn->Count++;
 196   3                      }
 197   2                      else                                                                            //按键按下
 198   2                      {
 199   3                              if (pBtn->State == 0)
 200   3                              {
 201   4                                      pBtn->State = 1;
 202   4                                      // 发送按钮按下的消息
 203   4                                      
 204   4                                      //enQueue(&f_K, 3 * i + 1); //push
 205   4                              }
 206   3      
 207   3                              if (pBtn->LongTime > 0)                                                 //长按判断
 208   3                              {
 209   4                                      if (pBtn->LongCount < pBtn->LongTime)           //长按计数器小于设定的时间
 210   4                                      {
 211   5                                              if (++pBtn->LongCount == pBtn->LongTime)
 212   5                                              {
 213   6                                                      KeyVal=(3 * i + 3);
 214   6                              a=1;
 215   6                                                      //enQueue(&f_K, 3 * i + 3); //push
 216   6                                              }
 217   5                                      }
 218   4                              }
 219   3                      }
 220   2              }
 221   1              else                                                                            //松开
 222   1              {
 223   2                      if (pBtn->Count > KEY_FILTER_TIME)      //计数器大于设定时间就是抖动
 224   2                      {
 225   3                              pBtn->Count = KEY_FILTER_TIME;
 226   3                      }
 227   2                      else if (pBtn->Count != 0)
 228   2                      {
 229   3                              pBtn->Count--;
 230   3                      }
 231   2                      else                                                                    //真的松开了
 232   2                      {
 233   3                              if (pBtn->State == 1)
 234   3                              {
 235   4                                      pBtn->State = 0;
 236   4                                      if (a == 0)
 237   4                      {
 238   5                                              KeyVal=(3 * i + 1);
 239   5                                      }
C51 COMPILER V9.60.0.0   BSP_KEY                                                           11/29/2022 09:15:39 PAGE 5   

 240   4                      a=0;
 241   4                                      //enQueue(&f_K, 3 * i + 2); //push
 242   4                              }
 243   3                                      //KeyVal=( 3 * i + 2);
 244   3                      }
 245   2      
 246   2                      pBtn->LongCount = 0;
 247   2      //              pBtn->RepeatCount = 0;
 248   2              }
 249   1      }
 250          
 251          void bsp_KeyScan(void)  //扫描全部按键
 252          {
 253   1              uint8_t i;
 254   1      
 255   1              for (i = 0; i < KEY_COUNT; i++)
 256   1              {
 257   2                      bsp_DetectKey(i);
 258   2              }
 259   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    366    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
